import pefile
import pickle
import numpy as np
import pandas as pd
import os
from sklearn.metrics import confusion_matrix
import warnings
warnings.filterwarnings('ignore')

global Malware
global total
Malware = []
# total = 0/


def solve(PATH, model, func):

    try:
        a = pefile.PE(PATH)
    except:
        print("error while reading the features!!!")
        return

    e_magic = a.DOS_HEADER.e_magic
    e_cblp = a.DOS_HEADER.e_cblp
    e_cp = a.DOS_HEADER.e_cp
    e_crlc = a.DOS_HEADER.e_crlc
    e_cparhdr = a.DOS_HEADER.e_cparhdr
    e_minalloc = a.DOS_HEADER.e_minalloc
    e_maxalloc = a.DOS_HEADER.e_maxalloc
    e_ss = a.DOS_HEADER.e_ss
    e_sp = a.DOS_HEADER.e_sp
    e_csum = a.DOS_HEADER.e_csum
    e_ip = a.DOS_HEADER.e_ip
    e_cs = a.DOS_HEADER.e_cs
    e_lfarlc = a.DOS_HEADER.e_lfarlc
    e_ovno = a.DOS_HEADER.e_ovno
    e_oemid = a.DOS_HEADER.e_oemid
    e_oeminfo = a.DOS_HEADER.e_oeminfo
    e_lfanew = a.DOS_HEADER.e_lfanew
    NumberOfSections = a.FILE_HEADER.NumberOfSections
    PointerToSymbolTable = a.FILE_HEADER.PointerToSymbolTable
    NumberOfSymbols = a.FILE_HEADER.NumberOfSymbols
    SizeOfOptionalHeader = a.FILE_HEADER.SizeOfOptionalHeader
    Characteristics = a.FILE_HEADER.Characteristics
    Magic = a.OPTIONAL_HEADER.Magic
    MajorLinkerVersion = a.OPTIONAL_HEADER.MajorLinkerVersion
    MinorLinkerVersion = a.OPTIONAL_HEADER.MinorLinkerVersion
    SizeOfCode = a.OPTIONAL_HEADER.SizeOfCode
    SizeOfInitializedData = a.OPTIONAL_HEADER.SizeOfInitializedData
    SizeOfUninitializedData = a.OPTIONAL_HEADER.SizeOfUninitializedData
    AddressOfEntryPoint = a.OPTIONAL_HEADER.AddressOfEntryPoint
    BaseOfCode = a.OPTIONAL_HEADER.BaseOfCode
    ImageBase = a.OPTIONAL_HEADER.ImageBase
    SectionAlignment = a.OPTIONAL_HEADER.SectionAlignment
    FileAlignment = a.OPTIONAL_HEADER.FileAlignment
    MajorOperatingSystemVersion = a.OPTIONAL_HEADER.MajorOperatingSystemVersion
    MinorOperatingSystemVersion = a.OPTIONAL_HEADER.MinorOperatingSystemVersion
    MajorImageVersion = a.OPTIONAL_HEADER.MajorImageVersion
    MinorImageVersion = a.OPTIONAL_HEADER.MinorImageVersion
    MajorSubsystemVersion = a.OPTIONAL_HEADER.MajorSubsystemVersion
    MinorSubsystemVersion = a.OPTIONAL_HEADER.MinorSubsystemVersion
    SizeOfHeaders = a.OPTIONAL_HEADER.SizeOfHeaders
    CheckSum = a.OPTIONAL_HEADER.CheckSum
    SizeOfImage = a.OPTIONAL_HEADER.SizeOfImage
    Subsystem = a.OPTIONAL_HEADER.Subsystem
    DllCharacteristics = a.OPTIONAL_HEADER.DllCharacteristics
    SizeOfStackReserve = a.OPTIONAL_HEADER.SizeOfStackReserve
    SizeOfStackCommit = a.OPTIONAL_HEADER.SizeOfStackCommit
    SizeOfHeapReserve = a.OPTIONAL_HEADER.SizeOfHeapReserve
    SizeOfHeapCommit = a.OPTIONAL_HEADER.SizeOfHeapCommit
    LoaderFlags = a.OPTIONAL_HEADER.LoaderFlags
    NumberOfRvaAndSizes = a.OPTIONAL_HEADER.NumberOfRvaAndSizes

    test = {
        'e_magic': [e_magic], 'e_cblp': [e_cblp], 'e_cp': [e_cp], 'e_crlc': [e_crlc], 'e_cparhdr': [e_cparhdr], 'e_minalloc': [e_minalloc],
        'e_maxalloc': [e_maxalloc], 'e_ss': [e_ss], 'e_sp': [e_sp], 'e_csum': [e_csum], 'e_ip': [e_ip], 'e_cs': [e_cs], 'e_lfarlc': [e_lfarlc],
        'e_ovno': [e_ovno], 'e_oemid': [e_oemid], 'e_oeminfo': [e_oeminfo], 'e_lfanew': [e_lfanew], 'NumberOfSections': [NumberOfSections],
        'PointerToSymbolTable': [PointerToSymbolTable], 'NumberOfSymbols': [NumberOfSymbols], 'SizeOfOptionalHeader': [SizeOfOptionalHeader],
        'Characteristics': [Characteristics], 'Magic': [Magic], 'MajorLinkerVersion': [MajorLinkerVersion], 'MinorLinkerVersion': [MinorLinkerVersion],
        'SizeOfCode': [SizeOfCode], 'SizeOfInitializedData': [SizeOfInitializedData], 'SizeOfUninitializedData': [SizeOfUninitializedData],
        'AddressOfEntryPoint': [AddressOfEntryPoint], 'BaseOfCode': [BaseOfCode], 'ImageBase': [ImageBase], 'SectionAlignment': [SectionAlignment],
        'FileAlignment': [FileAlignment], 'MajorOperatingSystemVersion': [MajorOperatingSystemVersion],
        'MinorOperatingSystemVersion': [MinorOperatingSystemVersion], 'MajorImageVersion': [MajorImageVersion], 'MinorImageVersion': [MinorImageVersion],
        'MajorSubsystemVersion': [MajorSubsystemVersion], 'MinorSubsystemVersion': [MinorSubsystemVersion], 'SizeOfHeaders': [SizeOfHeaders],
        'CheckSum': [CheckSum], 'SizeOfImage': [SizeOfImage], 'Subsystem': [Subsystem], 'DllCharacteristics': [DllCharacteristics],
        'SizeOfStackReserve': [SizeOfStackReserve], 'SizeOfStackCommit': [SizeOfStackCommit], 'SizeOfHeapReserve': [SizeOfHeapReserve],
        'SizeOfHeapCommit': [SizeOfHeapCommit], 'LoaderFlags': [LoaderFlags], 'NumberOfRvaAndSizes': [NumberOfRvaAndSizes]
    }
    test = pd.DataFrame(test)
    # total += 1
    if model.predict(test) == 0:
        print(PATH, " Successfully executed Given exeutable is Benign!!!\n")
    else:
        Malware.append(PATH)
        print(PATH, " Successfully executed Given exeutable is Malware!!!\n")


# assign directory
print("[1] For Single File press 1\n [2] For a Folder press 2\n")
func = int(input())

if func == 1:

    path = input("path of file : ")
    directory = path
    with open('model_pickle', 'rb') as f:
        try:
            model = pickle.load(f)
        except:
            input("error while reading the features!!!")

    if path and '.exe':
        # print(filename.path)
        solve(path, model, 1)


else:
    path = input("path of folder : ")
    with open('model_pickle', 'rb') as f:
        model = pickle.load(f)

    for filename in os.scandir(path):
        if filename.is_file() and 'model_pickle':
            # print(filename.path)
            solve(filename.path, model, func)

    # print("Number of files successfully detected : ", total)

    for malware in Malware:
        print(malware, " this file was detected as Malware \n")

input("Press Enter to continue...")
